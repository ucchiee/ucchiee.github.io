<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ucchiee's tech blog</title><link>https://ucchiee.com/posts/</link><description>Recent content in Posts on ucchiee's tech blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Jun 2022 17:28:37 +0900</lastBuildDate><atom:link href="https://ucchiee.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>ASLRを一時的に無効化する</title><link>https://ucchiee.com/posts/220606-aslr/</link><pubDate>Mon, 06 Jun 2022 17:28:37 +0900</pubDate><guid>https://ucchiee.com/posts/220606-aslr/</guid><description>
以下で ASLR が有効かどうか確認する。
1cat /proc/sys/kernel/randomize_va_space この値の詳細は以下。
Normally you might expect a value of 0 (disabled), or 1 (enabled). In the case of the randomize_va_space setting, this is true as well. When setting the value to 1, address space is randomized. This includes the positions of the stack itself, virtual dynamic shared object (VDSO) page, and shared memory regions. Setting the option to value 2 will be similar to 1, and add data segments as well.</description></item><item><title>gdbを用いたpintoolのデバグ その1</title><link>https://ucchiee.com/posts/220605-gdb-sigsegv/</link><pubDate>Sun, 05 Jun 2022 13:34:08 +0900</pubDate><guid>https://ucchiee.com/posts/220605-gdb-sigsegv/</guid><description>
Intel Pin を用いて投機実行のシミュレーションを行うプログラムのデバグの話。 投機実行のシミュレーション中は本来実行されない path が実行されるので、適宜シグナルの処理が必要。 すなわち、例えば SIGSEGV の場合、シミュレーション中に SIGSEGV が発生したらそれを抑え込む必要がある。 実際に SIGSEGV(に限らず他のシグナルも)が発生した場合には、そのシグナルを抑え込んだ上でシミュレーションを中断する処理を入れている。
問題になるのは、Pintool(シミュレートするプログラム)が何らかのバグで SIGSEGV を発生させ、落ちる場合である。 この時、発生する SIGSEGV は 2 種類ある。それは:
投機実行のシミュレーション中に発生する SIGSEGV : Pintool によって抑え込まれる 何らかのバグで pintool が発生させる SIGSEGV : 放置される（ので、pintool が落ちる 上記が理由で、(デバグのために)pintool が落ちる直前で一時停止するのが困難になる。 さて gdb でデバグしよう。 と思った際に、gdb は上記の 2 種類の SIGSEGV を区別せずに、それが発生したらプログラムを一時停止させる。 従ってcontコマンドを打って、実行が継続する場合と、そのまま pintool が落ちる場合があるからである。
どうやって落ちる直前で止まるか&amp;hellip;。 考えられる方法:
core dump の解析 &amp;hellip; つづく
Reference linuxでcore dumpを出す方法 : https://zenn.dev/blackengineer/articles/9c60cdfbc96bf1b769da</description></item><item><title>Pintoolをデバグする上でのメモ</title><link>https://ucchiee.com/posts/220604-pin-debug/</link><pubDate>Sat, 04 Jun 2022 10:36:05 +0900</pubDate><guid>https://ucchiee.com/posts/220604-pin-debug/</guid><description>
デバッグ情報が読めない問題に当たっていたが以下の様にDEBGU=1をつけてコンパイルするとデバッグ情報つきでコンパイルできる。 この情報はマニュアルには載っていない。
1make DEBGU=1 あとは公式マニュアル通りに gdb でアタッチすれば良い。
References Pin Manual : https://software.intel.com/sites/landingpage/pintool/docs/98579/Pin/doc/html/index.html</description></item><item><title>Decafを動かす時のメモ</title><link>https://ucchiee.com/posts/220418-decaf-build/</link><pubDate>Mon, 18 Apr 2022 11:18:12 +0900</pubDate><guid>https://ucchiee.com/posts/220418-decaf-build/</guid><description>
DECAF: https://github.com/decaf-project/DECAF
DECAFをビルドする時のメモをここに残す． 手順はレポジトリのWikiを参照．
make 1./configure 2make のmakeでこける． どうやら内部のpythonスクリプトがpython2.5以下の書き方をしていることに由来しているっぽい． 自分の環境に入っているpython2系はpython2.7． 2.5以下との互換性はない．
とるべき道は2つ．pythonスクリプトを書き換えるか，python2.5以下を入れるか． とりあえずsyntax errorが出ているのでpythonスクリプトを変更してみる． syntax errorを全て取り除いた．try/except周りとprint周り．
次は
1ModuleNotFoundError: No module named &amp;#39;UserDict&amp;#39; これはpython2系でのみのモジュール． どうやらpython3系で動かしていることが直接の原因っぽい． ので，python2系を使えるように方針変更．
各ツールのバージョン管理にはasdfを用いている．
1asdf install python 2.7.14 2asdf local python 2.7.14 これでpythonがpython2.7.14を指すようになった．
1make 途中でWarningがたくさん出るが，落ちていないので大丈夫な感じなのだろうか． 3m59sで終了． 不具合があれば2.5以下にしたほうがいいかも．ひとまずこのまま進める．
image QCOW formatのimageが必要らしい．
ここからubuntu18.04の.imgファイルをダウンロード．
VMI configuration for linux guest os にファイルをコピーしろと言っている． まだ起動もしていないんだが． imgファイルをいじれってこと？まさか．
ひとまずここまで．
起動してみる 以下のコマンドで一応起動を確認した:
1./qemu-system-i386 -monitor stdio -m 512 -netdev user,id=mynet -device rtl8139,netdev=mynet ../../disk-image/ubuntu-18.04-amd64.img</description></item><item><title>hugo: found no layout file for "HTML" for kind...の解決方法</title><link>https://ucchiee.com/posts/220417-hugo-submodule/</link><pubDate>Sun, 17 Apr 2022 11:22:18 +0900</pubDate><guid>https://ucchiee.com/posts/220417-hugo-submodule/</guid><description>
1hugo server 上記のコマンドでサーバーを立ち上げたときに，以下のWarningが出ることがある．
1WARN 2022/04/17 10:43:50 found no layout file for &amp;#34;HTML&amp;#34; for kind &amp;#34;home&amp;#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. themeのsubmoduleが初期化されてないことが原因なので，以下のコマンドで初期化して解決．
1git submodule update -i</description></item><item><title>「プログラミング言語C++」を読んで得た役に立たなそうな知識</title><link>https://ucchiee.com/posts/bjarne_tips/</link><pubDate>Mon, 11 Apr 2022 23:47:06 +0900</pubDate><guid>https://ucchiee.com/posts/bjarne_tips/</guid><description>
C++ Tips ビャーネ・ストラウストラップによる「プログラミング言語C++」を読んで得た，役に立つかわからない知見を保存していく． 随時更新の予定．
Type 以下は実は定義:
1sizeof(char) == 1 Pointer, Array, Reference ポインタの参照外しの亜種(決して変な真似はしないように):
1a[j] == *(&amp;amp;a[0] + j) == *(a+j) == *(j+a) == j[a] 参照崩壊(左辺参照は常に勝つ):(以下は本文から引用)
1using rr_i = int&amp;amp;&amp;amp;; 2using lr_i = int&amp;amp;; 3using rr_rr_i = rr_i&amp;amp;&amp;amp;; // &amp;#34;int &amp;amp;&amp;amp; &amp;amp;&amp;amp;&amp;#34; はint &amp;amp;&amp;amp; 4using lr_rr_i = rr_i&amp;amp;; // &amp;#34;int &amp;amp;&amp;amp; &amp;amp;&amp;#34; はint &amp;amp; 5using rr_lr_i = lr_i&amp;amp;&amp;amp;; // &amp;#34;int &amp;amp; &amp;amp;&amp;amp;&amp;#34; はint &amp;amp; 6using lr_lr_i = lr_i&amp;amp;; // &amp;#34;int &amp;amp; &amp;amp;&amp;#34; はint &amp;amp;</description></item><item><title>Hugo + Github pagesで独自ドメインのサイトを作ってみた</title><link>https://ucchiee.com/posts/220227_hello_world/</link><pubDate>Sun, 27 Feb 2022 22:22:09 +0900</pubDate><guid>https://ucchiee.com/posts/220227_hello_world/</guid><description>
WIP 1#include &amp;lt;stdio.h&amp;gt;2int main(void) { 3 printf(&amp;#34;hello world\n&amp;#34;); 4 return 0; 5}</description></item></channel></rss>